This program should be regarded as a DEBUGGING aid, not as a 
certifier of correctness.
Call with the -l flag or read the license file for terms
and conditions of use.
Run this program with "-h" for the list of options.

Bugs, questions, and comments should be directed to
"murphi@verify.stanford.edu".

Murphi compiler last modified date: Jan 29 1999
Include files   last modified date: Jan 29 1999
==========================================================================

==========================================================================
Murphi Release 3.1
Finite-state Concurrent System Verifier.

Copyright (C) 1992 - 1999 by the Board of Trustees of
Leland Stanford Junior University.

==========================================================================

Protocol: msi_opt

Algorithm:
	Simulation.
Start Simulation :

I ==(store)==> M Create Msg 0:: type: GetM, src: 2, dst: 7, ack_cnt: 0, src_state: Proc_IM_D, dst_state: Dir_I
I ==(store)==> M Create Msg 1:: type: GetM, src: 3, dst: 7, ack_cnt: 0, src_state: Proc_IM_D, dst_state: Dir_I
I ==(load)==> S Create Msg 2:: type: GetS, src: 1, dst: 7, ack_cnt: 0, src_state: Proc_IS_D, dst_state: Dir_I
  Receive Msg 0:: type: GetM, src: 2, dst: 7, ack_cnt: 0, src_state: Proc_IM_D, dst_state: Dir_I
 Create Msg 3:: type: Data, src: 7, dst: 2, ack_cnt: 0, src_state: Dir_M, dst_state: Proc_IM_D, val: 6
  Receive Msg 2:: type: GetS, src: 1, dst: 7, ack_cnt: 0, src_state: Proc_IS_D, dst_state: Dir_M
 Create Msg 4:: type: FwdGetS, src: 7, dst: 2, ack_cnt: 0, src_state: Dir_MX_D, dst_state: Proc_IM_D, fwd_to: 1
  Receive Msg 4:: type: FwdGetS, src: 7, dst: 2, ack_cnt: 0, src_state: Dir_MX_D, dst_state: Proc_IM_D, fwd_to: 1
  Receive Msg 3:: type: Data, src: 7, dst: 2, ack_cnt: 0, src_state: Dir_MX_D, dst_state: Proc_IM_D, val: 6
  Receive Msg 1:: type: GetM, src: 3, dst: 7, ack_cnt: 0, src_state: Proc_IM_D, dst_state: Dir_MX_D
 Create Msg 5:: type: FwdAck, src: 2, dst: 7, ack_cnt: 0, src_state: Proc_S, dst_state: Dir_MX_D, val: 5
 Create Msg 6:: type: Data, src: 2, dst: 1, ack_cnt: 0, src_state: Proc_S, dst_state: Proc_IS_D, val: 5
S ==(store)==> M Create Msg 7:: type: GetM, src: 2, dst: 7, ack_cnt: 0, src_state: Proc_SM_D, dst_state: Dir_MX_D
  Receive Msg 5:: type: FwdAck, src: 2, dst: 7, ack_cnt: 0, src_state: Proc_SM_D, dst_state: Dir_MX_D, val: 5
 Create Msg 8:: type: Data, src: 7, dst: 3, ack_cnt: 2, src_state: Dir_SM_A, dst_state: Proc_IM_D, val: 5
  Receive Msg 8:: type: Data, src: 7, dst: 3, ack_cnt: 2, src_state: Dir_SM_A, dst_state: Proc_IM_D, val: 5
M ==(evict)==> I Create Msg 9:: type: PutM, src: 3, dst: 7, ack_cnt: 0, src_state: Proc_MI_A, dst_state: Dir_SM_A, val: 6
  Receive Msg 9:: type: PutM, src: 3, dst: 7, ack_cnt: 0, src_state: Proc_MI_A, dst_state: Dir_SM_A, val: 6
  Receive Msg 6:: type: Data, src: 2, dst: 1, ack_cnt: 0, src_state: Proc_SM_D, dst_state: Proc_IS_D, val: 5

Status:

	16 rules fired in simulation in 0.10s.

Error:

	Invariant values in valid state match last write failed.

